if (typeof module !== "undefined" && typeof exports !== "undefined" && module.exports === exports) {
    module.exports = 'ngTree';
}

(function (angular) {

    var ngTree = angular.module('ngTree', []);

    var treeTemplate = '' +
            '<ul class="tree">' +
            '    <div data-tree-node' +
            '         data-item="item"' +
            '         data-label-attribute="labelAttribute"' +
            '         data-on-expand="onExpand"' +
            '         data-on-select="onSelect"' +
            '         data-unselect-all="unselectAll"' +
            '         ng-if="!item.parentId"' +
            '         ng-repeat="item in items track by item.id">' +
            '    </div>' +
            '</ul>';


    TreeCtrl.$inject = ['$scope'];
    function TreeCtrl($scope) {
        $scope.labelAttribute = $scope.labelAttribute || 'id';

        function unselectAll(items) {
            items.forEach(function (item) {
                item.selected = false;
                var children = item.children;
                if (children && children instanceof Array && children.length) {
                    unselectAll(children);
                }
            });
        }

        $scope.unselectAll = function () {
            var roots = $scope.items.filter(function (item) {
                return !item.parentId;
            });
            unselectAll(roots);
        };
    }

    function tree() {
        return {
            restrict: 'A',
            replace: true,
            scope: {
                items: '=',
                labelAttribute: '@',
                onExpand: '&',
                onSelect: '&'
            },
            template: treeTemplate,
            controller: TreeCtrl
        };
    }

    ngTree.directive('tree', tree);

    var treeNodeTemplate = '' +
            '<li ng-class="{selected:item.selected}">' +
            '    <i class="node-toggle" ng-class="getClass(item)" ng-click="toggle(item)" ng-if="item.hasChildren"></i>' +
            '    <i class="node-leaf glyphicon glyphicon-file" ng-if="!item.hasChildren"></i>' +
            '    <span class="node-label" ng-click="handleLabelClick(item)">{{getLabel(item)}}</span>' +
            '    <ul ng-hide="item.collapsed || item.hidden">' +
            '        <div data-tree-node' +
            '             data-item="child"' +
            '             data-label-attribute="labelAttribute"' +
            '             data-on-expand="onExpand"' +
            '             data-on-select="onSelect"' +
            '             data-unselect-all="unselectAll"' +
            '             ng-repeat="child in item.children track by child.id">' +
            '        </div>' +
            '    </ul>' +
            '</li>';


    TreeNodeCtrl.$inject = ['$scope'];
    function TreeNodeCtrl($scope) {
        $scope.getLabel = function (item) {
            return item[$scope.labelAttribute];
        };

        $scope.expand = function (item) {
            if (item.hasChildren) {
                var onExpand = $scope.onExpand;
                if (typeof onExpand === 'function') {
                    onExpand({item: item});
                }
                item.collapsed = false;
            }
        };

        $scope.toggle = function (item) {
            if (item.collapsed) {
                $scope.expand(item);
            } else {
                item.collapsed = true;
            }
        };

        $scope.handleLabelClick = function (item) {
            var unselectAll = $scope.unselectAll;
            if (typeof unselectAll === 'function') {
                unselectAll();
            }
            var onSelect = $scope.onSelect;
            if (typeof onSelect === 'function') {
                onSelect({item: item});
            }
            item.selected = true;
            $scope.expand(item);
        };

        $scope.getClass = function (item) {
            if (!item.hasOwnProperty('collapsed') && item.hasChildren && !item.children) {
                item.collapsed = true;
            }
            return {
                'glyphicon glyphicon-folder-close': item.collapsed,
                'glyphicon glyphicon-folder-open': !item.collapsed
            };
        };
    }

    function treeNode() {
        return {
            restrict: 'A',
            replace: true,
            scope: {
                item: '=',
                labelAttribute: '=',
                onExpand: '=',
                onSelect: '=',
                unselectAll: '='
            },
            template: treeNodeTemplate,
            controller: TreeNodeCtrl
        };
    }

    ngTree.directive('treeNode', treeNode);

}(angular));
